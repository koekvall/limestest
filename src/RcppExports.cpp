// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_PsiRcpp
Eigen::SparseMatrix<double> get_PsiRcpp(Eigen::Map<Eigen::VectorXd> psi, Eigen::MappedSparseMatrix<double> H);
RcppExport SEXP _limestest_get_PsiRcpp(SEXP psiSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(get_PsiRcpp(psi, H));
    return rcpp_result_gen;
END_RCPP
}
// loglik_psiRcpp
List loglik_psiRcpp(Eigen::MappedSparseMatrix<double> Z, Eigen::Map<Eigen::VectorXd> e, Eigen::MappedSparseMatrix<double> H, Eigen::MappedSparseMatrix<double> Psi0, double psi0, bool loglik, bool score, bool finf, bool expected);
RcppExport SEXP _limestest_loglik_psiRcpp(SEXP ZSEXP, SEXP eSEXP, SEXP HSEXP, SEXP Psi0SEXP, SEXP psi0SEXP, SEXP loglikSEXP, SEXP scoreSEXP, SEXP finfSEXP, SEXP expectedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type e(eSEXP);
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type H(HSEXP);
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type Psi0(Psi0SEXP);
    Rcpp::traits::input_parameter< double >::type psi0(psi0SEXP);
    Rcpp::traits::input_parameter< bool >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< bool >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< bool >::type finf(finfSEXP);
    Rcpp::traits::input_parameter< bool >::type expected(expectedSEXP);
    rcpp_result_gen = Rcpp::wrap(loglik_psiRcpp(Z, e, H, Psi0, psi0, loglik, score, finf, expected));
    return rcpp_result_gen;
END_RCPP
}
// res_llRcpp
List res_llRcpp(Eigen::Map<Eigen::MatrixXd> X, Eigen::Map<Eigen::VectorXd> Y, Eigen::MappedSparseMatrix<double> Z, Eigen::MappedSparseMatrix<double> H, Eigen::MappedSparseMatrix<double> Psi0, double psi0, bool lik, bool score, bool finf);
RcppExport SEXP _limestest_res_llRcpp(SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP HSEXP, SEXP Psi0SEXP, SEXP psi0SEXP, SEXP likSEXP, SEXP scoreSEXP, SEXP finfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type H(HSEXP);
    Rcpp::traits::input_parameter< Eigen::MappedSparseMatrix<double> >::type Psi0(Psi0SEXP);
    Rcpp::traits::input_parameter< double >::type psi0(psi0SEXP);
    Rcpp::traits::input_parameter< bool >::type lik(likSEXP);
    Rcpp::traits::input_parameter< bool >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< bool >::type finf(finfSEXP);
    rcpp_result_gen = Rcpp::wrap(res_llRcpp(X, Y, Z, H, Psi0, psi0, lik, score, finf));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_limestest_get_PsiRcpp", (DL_FUNC) &_limestest_get_PsiRcpp, 2},
    {"_limestest_loglik_psiRcpp", (DL_FUNC) &_limestest_loglik_psiRcpp, 9},
    {"_limestest_res_llRcpp", (DL_FUNC) &_limestest_res_llRcpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_limestest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
